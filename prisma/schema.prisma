// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      Int                   @default(autoincrement()) @id
  firstName               String
  lastName                String
  email                   String                @unique
  password                String      
  emailVerified           Boolean               @default(false)
  bio                     String?     
  avatarUrl               String?     
  role                    Role                  @default(USER)
  skillsOffered           UserSkillOffered[]
  skillsWanted            UserSkillWanted[]
  tokens                  Token[]
  skillMatchesAsSender    SkillMatch[]          @relation("SenderSkillMatches")
  skillMatchesAsReceiver  SkillMatch[]          @relation("ReceiverSkillMatches")
  chatMessages            ChatMessage[]
  resources               Resource[]
  streamSessionsAsTeacher StreamSession[]       @relation("TeacherStreamSessions")
  streamSessionsAsLearner StreamSession[]       @relation("LearnerStreamSessions")
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt()
}

enum Role {
  USER
  ADMIN
}

model Token {
  id         Int      @id @default(autoincrement())
  token      String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  deviceInfo String   
  ipAddress  String
  expiresAt  DateTime
  revoked    Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()

  @@unique([userId, deviceInfo])
}

model Skill {
  id                    Int                 @id @default(autoincrement())
  name                  String      
  categoryId            Int     
  category              Category            @relation(fields: [categoryId], references: [id])
  usersOffered          UserSkillOffered[]
  usersWanted           UserSkillWanted[]
  senderSkillMatches    SkillMatch[]        @relation("SenderSkillSkillMatches")
  receiverSkillMatches  SkillMatch[]        @relation("ReceiverSkillSkillMatches")
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt()

  @@unique([name, categoryId])
}

model UserSkillOffered {
  userId                Int      
  user                  User          @relation(fields: [userId], references: [id])
  skillId               Int      
  skill                 Skill         @relation(fields: [skillId], references: [id])
  canMatch              Boolean       @default(true)
  exchangeCount         Int           @default(0)

  @@id([userId, skillId])
}

model UserSkillWanted {
  userId                Int      
  user                  User          @relation(fields: [userId], references: [id])
  skillId               Int      
  skill                 Skill         @relation(fields: [skillId], references: [id])
  canMatch              Boolean       @default(true)
  exchangeCount         Int           @default(0)
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt()

  @@id([userId, skillId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  skills    Skill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model SkillMatch {
  id              Int           @id @default(autoincrement())
  senderId        Int 
  sender          User          @relation("SenderSkillMatches", fields: [senderId], references: [id])
  receiverId      Int 
  receiver        User          @relation("ReceiverSkillMatches", fields: [receiverId], references: [id])
  senderSkillId   Int 
  senderSkill     Skill         @relation("SenderSkillSkillMatches", fields: [senderSkillId], references: [id])
  receiverSkillId Int 
  receiverSkill   Skill         @relation("ReceiverSkillSkillMatches", fields: [receiverSkillId], references: [id])
  status          MatchStatus   @default(PENDING)
  exchangeRoom    ExchangeRoom? 
  respondedAt     DateTime?      
  completedAt     DateTime?      
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt()

  @@unique([senderId, senderSkillId, receiverId, receiverSkillId, completedAt])
}

enum MatchStatus {
  PENDING
  CANCELED
  CONFIRMED
  DECLINED
  COMPLETED
}

model ExchangeRoom {
  id              Int             @id @default(autoincrement())
  skillMatchId    Int             @unique
  skillMatch      SkillMatch      @relation(fields: [skillMatchId], references: [id])
  chatMessages    ChatMessage[]
  resources       Resource[]
  streamSessions  StreamSession[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt()
}

model ChatMessage {
  id              Int                   @id @default(autoincrement())
  textMessage     TextMessage?      
  liveMessage     LiveMessage?      
  exchangeRoomId  Int     
  exchangeRoom    ExchangeRoom          @relation(fields: [exchangeRoomId], references: [id])
  senderId        Int      
  sender          User                  @relation(fields: [senderId], references: [id])
  type            RoomChatMessageType     
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt()
}

enum RoomChatMessageType {
  TEXT
  LIVE
}

model TextMessage {
  id          Int         @id @default(autoincrement())
  text        String
  messageId   Int         @unique
  message     ChatMessage @relation(fields: [messageId], references: [id])
}

model LiveMessage {
  id          Int           @id @default(autoincrement())
  channelId   String  
  messageId   Int           @unique
  message     ChatMessage   @relation(fields: [messageId], references: [id])
  sessionId   Int           @unique
  session     StreamSession @relation(fields: [sessionId], references: [id])
}

model Resource {
  id              Int             @id @default(autoincrement())
  url             String
  exchangeRoomId  Int
  exchangeRoom    ExchangeRoom    @relation(fields: [exchangeRoomId], references: [id])
  uploadedById    Int
  uploadedBy      User            @relation(fields: [uploadedById], references: [id])
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt()
}

model StreamSession{
  id              Int             @id @default(autoincrement())
  exchangeRoomId  Int 
  exchangeRoom    ExchangeRoom    @relation(fields: [exchangeRoomId], references: [id])
  channelId       String          @default(uuid()) @unique
  teacherId       Int
  teacher         User            @relation("TeacherStreamSessions", fields: [teacherId], references: [id])
  learnerId       Int
  learner         User            @relation("LearnerStreamSessions", fields: [learnerId], references: [id])
  startedAt       DateTime        @default(now())
  endedAt         DateTime?       
  // duration        Int?  
  // liveMessageId   Int?    
  liveMessage     LiveMessage?    
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt()

  @@index([endedAt])
}
