// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @default(autoincrement()) @id
  email         String   @unique
  password      String
  emailVerified Boolean  @default(false)
  name          String
  bio           String?
  avatarUrl     String?
  role          Role     @default(USER)
  skillsOffered Skill[]  @relation("UserOfferedSkills")
  skillsWanted  Skill[]  @relation("UserWantedSkills")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()
  tokens        Token[]
}

enum Role {
  USER
  ADMIN
}

model Token {
  id         Int      @id @default(autoincrement())
  token      String
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  deviceInfo String   
  ipAddress  String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt()
  expiresAt  DateTime
  revoked    Boolean  @default(false)

  @@unique([userId, deviceInfo])
}

model Skill {
  id            Int      @id @default(autoincrement())
  name          String
  categoryId    Int
  category      Category @relation(fields: [categoryId], references: [id])
  usersOffered  User[]   @relation("UserOfferedSkills")
  usersWanted   User[]   @relation("UserWantedSkills")
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt()

  @@unique([name, categoryId])
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  skills    Skill[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}